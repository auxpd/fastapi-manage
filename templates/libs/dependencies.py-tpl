from typing import List, Sequence, Union

from loguru import logger
from starlette.requests import HTTPConnection
from fastapi.security import OAuth2PasswordBearer
from fastapi import Depends, HTTPException, Request

from core.config import settings
from middleware.auto_db_session import DBSessionBase
from middleware.authentication import BearerAuthenticationMiddleware

oauth2 = OAuth2PasswordBearer(tokenUrl=f'{settings.API_V1_STR}/user/login')


class BaseDepends:
    def __init__(self):
        pass

    def __call__(self, request: Request):
        self.request = request


class UtilsBase(BaseDepends):
    def __init__(self, auth: bool = False, scopes: Union[List[str], str] = None):
        super().__init__()
        self.auth = auth
        self.scopes = scopes

    def __call__(self, request: Request):
        super().__call__(request)
        if self.auth:
            if not request.user.is_authenticated:
                raise HTTPException(detail='permission denied', status_code=403)
            if self.scopes:
                scopes_list = [self.scopes] if isinstance(self.scopes, str) else list(self.scopes)
                if not self.has_required_scope(request, scopes_list):
                    raise HTTPException(detail='permission denied', status_code=403)
        if not hasattr(request.state, 'db'):
            request.state.db = DBSessionBase()
        request.db = request.state.db
        return request

    @staticmethod
    def has_required_scope(conn: HTTPConnection, scopes: Sequence[str]) -> bool:
        """ Group authentication is passed as long as the user belongs to one of the groups """
        if not len(conn.auth.scopes):
            return False
        for scope in scopes:
            if scope in conn.auth.scopes:
                return True
        return False


class Utils(UtilsBase):
    """
    expansion of the request obj
    """
    middleware_check_flag = False

    def __call__(self, request: Request, token: str = Depends(oauth2)):
        if not self.middleware_check_flag:
            logger.debug('Dependency checking')
            user_middleware = [mw.cls for mw in request.app.user_middleware]
            if BearerAuthenticationMiddleware not in user_middleware:
                raise NameError('auth dependent AuthenticationMiddleware, But not added')
            else:
                Utils.middleware_check_flag = True
        return super().__call__(request)

    def __new__(cls, auth: bool = False, *args, **kwargs):
        return object.__new__(cls) if auth else UtilsBase(auth, *args, **kwargs)

